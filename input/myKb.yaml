# run:  node src/cli.js input/myKb.yaml -o output/myKb to generate
units:
  # Choc keycaps are 17.5 x 16.5
  keycapX: cx-.5
  keycapY: cy-.5
  # 1.5 Choc keycaps are 26.5 (18*1.5 - .5) x 16.5
  keycap15X: cx*1.5-.5
  keycap15Y: cy-.5
  # left thumb top center border referenced to index bottom center
  innrThumbTopX: cx * (9/4) - cy * (1*cos(30deg)) - cx*cos(5deg) - (cx/2) cos(15deg) - cy sin(15deg)
  innrThumbTopY: cx * ((-3/2)*cos(30deg)) + cy * ((-3/4)) + cx*sin(5deg) - (cx/2) sin(15deg) + cy cos(15deg)
points:
  key: # default settings for all keys
    origin: [-cx/2, -cy/2] #ref splay around the bottom left corner
    spread: cx
    width: cx
    height: cy
    padding: cy
  zones:
    matrix:
      columns:
        pinky:
          key:
            splay: 15
          rows:
            bottom:
              bind: [0,0,0,0]
              column_net: P10
            home:
              bind: [0,10,0,0]
              column_net: P9
            top:
              bind: [0,10,0,0]
              column_net: P4
        ring:
          key:
            stagger: (5/6)cy
            splay: -5
          rows:
            bottom:
              bind: [0,20,0,0]
              column_net: P16
            home:
              bind: [0,0,0,0]
              column_net: P8
            top:
              bind: [0,10,0,0]
              column_net: P3
        middle:
          key:
            stagger: cy/3
            splay: -5
          rows:
            bottom:
              column_net: P14
            home:
              column_net: P7
            top:
              column_net: P2
        index:
          key:
            origin: [-cx/2,-cy/2+1/3cy] #to make symetric 
            stagger: -cy/3
            splay: -5
          rows:
            bottom:
              bind: [0,0,15,0]
              column_net: P15
            home:
              bind: [0,0,0,0]
              column_net: P6
            top:
              bind: [0,0,0,10]
              column_net: P0
        inner:
          key:
            stagger: -cy/4
          rows: 
            bottom:
              bind: [0,0,0,0]
              column_net: P18
            home:
              bind: [0,0,0,0]
              column_net: P5
            top:
              column_net: P1

    thumb:
      anchor:
        - ref: matrix_inner_bottom
        - shift: [-(cy-cx)/2,-1.5cx-(cy-1.5cx)/2] # move to overlap bottom left corner
        - shift: [3cx/2,-cy/2] # move for spacing
      key:
        spread: -cx
      columns:
        right:
          key:
            origin: [cy/2, 1.5cx/2] # grab point where top left corner will come after rotation
            splay: -30
            rotate: 90
            width: 1.5cx
            column_net: P21
            bind: [25,0,0,0]
        center:
          key:
            splay: 25
            spread: (-cy-cx)/2
            stagger: (-1.5cx/2)+cy/2 # shift to lineup bottoms
            origin: [.5cx,-.5cy]
            column_net: P20
            bind: [0,0,0,0]
        left:
          key:
            origin: [.5cx,-.5cy]
            splay: 20
            column_net: P19
            bind: [0,5,0,0]



outlines:
  raw:
    - what: rectangle
      where: -thumb_right
      bound: true
      size: [cx , cy]  
    - what: rectangle
      where: thumb_right
      bound: true
      size: [1.5cx, 1cy]
    - what: polygon
      points:
        - ref: thumb_right
          shift: [-1.5cx/2, -cy/2]
        - ref: thumb_right
          shift: [-1.5cx/2, cy/2]
        - ref: matrix_inner_top
          shift: [-cx/2, cy/2]
        - ref: matrix_inner_top
          shift: [cx/2, cy/2]
        - shift: [0,-cy/4]
        - shift: [20,0]
        - shift: [0,-60]
      #operation: stack

  margin:
    - what: outline
      name: raw
      expand: 2
      fillet: 1
  keycap_outlines:
    - what: rectangle
      where: -thumb_right
      bound: false
      size: [keycapX, keycapY] 
      corner: 1
    - what: rectangle
      where: thumb_right
      bound: false
      size: [keycap15X, keycap15Y] 
      corner: 1
  chocSwitches:
    - what: rectangle
      where: true
      bound: false
      size: [15, 15] 
      corner: 1
  board:
    - what: outline
      name: margin
pcbs:
  architeuthis_dux:
    outlines:
      main:
        outline: board
    footprints:
      choc_hotswap:
        what: choc
        where: true
        params:
          from: "{{column_net}}"
          to: GND
          keycaps: true
          reverse: true
          hotswap: true
      # choc:
      #   what: choc
      #   where: true
      #   adjust:
      #     rotate: 180
      #   params:
      #     from: "{{column_net}}"
      #     to: GND
      #     keycaps: true
      #     reverse: true
      promicro:
        what: niceNanoPretty
        where:
          ref: matrix_inner_top
          shift: [1cx+2, -1cy + 2.216]
      mountingHole1:
        what: reinforcedMountHole
        where:
          ref: matrix_pinky_top
          shift: [cx/2 + ((13cy/6)-1.1) * tan(2.5deg),cy/2-1.1]
      #mountingHoleRingMiddle:
       # what: reinforcedMountHole
       # where:
       # ref: matrix_ring_top
       # shift: [cx/2 + ((8cy/3)-(1.1+cy/2)) * tan(2.5deg),0]
      # mountingHoleBelowMcu:
      #   what: reinforcedMountHole
      #   where:
      #     ref: matrix_index_bottom
      #     shift: [2cx+2, ((innrThumbTopY - innrThumbTopX * tan(15deg)) + cy/2) / 2 - (cy/2)]
      mountingHole3:
        what: reinforcedMountHole
        where:
          ref: matrix_middle_home
          shift: [cx/2 + (2cy - 1.1) * tan(2.5deg),cy/2]
      mountingHole4:
        what: reinforcedMountHole
        where:
          ref: matrix_index_bottom
          shift: [0, ((innrThumbTopY - innrThumbTopX * tan(15deg)) + cy/2) / 2 - (cy/2)]

      mountingHole5:
        what: reinforcedMountHole
        where:
          ref: thumb_right
          shift: [0,(1.5cx/2) * tan(12.5deg) + cy/2]
      resetSwitch:
        what: resetSwitchTop
        where:
          ref: matrix_inner_bottom
          shift: [cx/2 + 19, -cy/8]
          rotate: 90
        params:
          reversible: true
      battCon:
        what: batteryConnector
        where:
          ref: matrix_inner_bottom
          shift: [cx/2 + (5.9/2) + 2, 0 ]
        params:
          reversible: true
      powerSwitch:
        what: powerSwitch
        where:
          ref: matrix_inner_top
          shift: [1cx+2, cy/4-1]
          rotate: 90
        params:
          reversible: true



      
